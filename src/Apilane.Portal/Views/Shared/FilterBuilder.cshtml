@using Apilane.Common
@using Apilane.Portal.Models
@using Apilane.Common.Models
@using Microsoft.AspNetCore.Http;
@model DBWS_Entity

@{ 
    string ExistingFilter = (string)ViewBag.ExistingFilter;
}

<div id="filters-wrapper">
    <div>
        <a id="add-new-filter" href="#" data-bs-toggle="tooltip" class="btn btn-sm mb-4 btn-secondary">
            <i class="bi bi-plus me-1"></i> Add filter
        </a>
    </div>
    <div class="filters-area"></div>
    <div class="row mt-2 d-none">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <textarea id="filter-builder-result" readonly class="form-control" disabled></textarea>
        </div>
    </div>
</div>

<script type="text/x-jquery-tmpl" id="filter-item-template">
    <div class="filter-item mb-2" data-id="{data-id}">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                <select class="form-control form-control-sm filter-editable-item filter-property filter-property-{data-id}">
                    @foreach(var prop in Model.Properties)
                    {
                        <option value="@prop.Name">@prop.Name</option>
                    }
                </select>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                <select class="form-control form-control-sm filter-editable-item filter-operator filter-operator-{data-id}">
                    @foreach(var item in FilterData.AvailableFilterOperators)
                    {
                        <option value="@item.Item2.First()">@item.Item2.First()</option>
                    }
                </select>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                <input type="text" placeholder="Value" class="form-control form-control-sm filter-editable-item filter-value filter-value-{data-id}"/>
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12 col-xs-12">
                <a class="remove-filter btn btn-sm btn-secondary" data-id="{data-id}" href="javascript:removeFilterItem({data-id})"><i class="bi bi-x"></i></a>
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">

    var currentFilterIndex = 1;

    @if (string.IsNullOrWhiteSpace(ExistingFilter) == false)
    {
        <text>
        try {
            var existingFilter = @Html.Raw(ExistingFilter);
            $.each(existingFilter.Filters, function (index, value) {
                appendNewFilter(value.Property, value.Operator, value.Value);
            });
        } catch (err) {
            console.error('Please report bug: ', err);
        }
        </text>
    }

    refreshCurrentFilterOutput();

    function htmlDecode(input){
        var e = document.createElement('div');
        e.innerHTML = input;
        // handle case of empty input
        return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
    }

    $('#add-new-filter').click(function () {
        appendNewFilter(null, null, '');
    });

    function removeFilterItem(id) {
        $('.filter-item[data-id="' + id + '"]').remove();
        refreshCurrentFilterOutput();
    }

    function appendNewFilter(property, operator, value) {
        var html = $('#filter-item-template').html();
        while (html.indexOf('{data-id}') !== -1) {
            html = html.replace('{data-id}', currentFilterIndex);
        }
       
        $('#filters-wrapper .filters-area').append(html);

        if (property != null && property != '')
            $('#filters-wrapper .filter-property-' + currentFilterIndex + ' option[value="' + property + '"]').prop('selected', true);
        if (operator != null && operator != '')
            $('#filters-wrapper .filter-operator-' + currentFilterIndex + ' option[value="' + operator + '"]').prop('selected', true);
        //if (value != null && value != '')
        $('#filters-wrapper .filter-value-' + currentFilterIndex + '').val(value == null ? 'null' : value);

        currentFilterIndex++;

        $('.filter-editable-item').on('input', function() {
            refreshCurrentFilterOutput();
        });
        refreshCurrentFilterOutput();
    }

    function refreshCurrentFilterOutput() {
        var filterObj = getFilterObject();
        $('#filter-builder-result').text(filterObj.Filters.length > 0 ? JSON.stringify(filterObj) : '');
        $('#filter-builder-result').css('display', filterObj.Filters.length > 0 ? 'block' : 'none');
    }

    function getFilterObject() {

        var Filter = { Logic: "and", Filters: [] };
        $.each($('.filter-item'), function (index, $element) {
            var property = $($element).find('.filter-property').find("option:selected").val();
            var operator = $($element).find('.filter-operator').find("option:selected").val();
            var value = $($element).find('.filter-value').val();
            if (value == 'null')
                value = null;

            Filter.Filters.push({ Property: property, Operator: operator, Value: value});
        });


        return Filter;
    }

</script>
