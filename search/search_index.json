{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-is-apilane","title":"What Is Apilane?","text":"<p>Apilane is a backend platform that provides tools for developing and managing APIs for mobile and web client applications. It offers features such as database management, user authentication, file storage and more, aiming to simplify backend development.</p> <p></p>"},{"location":"#why-apilane","title":"Why Apilane?","text":"<ul> <li> <p>Rapid Development: Apilane provides pre-built backend services, such as user authentication, database management and file storage. This eliminates the need to develop these functionalities from scratch, allowing developers to focus more on building and refining the frontend of their applications.</p> </li> <li> <p>Scalability: Apilane is designed to handle scalability challenges inherent in modern applications. This scalability ensures that applications remain responsive and available even as they grow in popularity and usage.</p> </li> <li> <p>Simplicity: Apilane abstracts away the complexity of backend development by providing easy-to-use API. Developers can quickly integrate backend services into their applications without needing extensive backend development expertise.</p> </li> <li> <p>Security: Apilane implements robust security measures, that is data encryption, access controls and rate limiting.</p> </li> <li> <p>Storage providers: Out of the box support for Sqlite, SQLServer and MySql.</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Execute the following docker-compose.yaml using the command <code>docker-compose -p apilane up -d</code> which will setup the Portal and the Api services on docker. You may then access the portal on http://localhost:5000.</p> <p>For more info follow our getting started guide.</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#core","title":"Core","text":"<ul> <li>Apilane Portal - A service that acts as the web portal, offering visual tools for managing APIs served from <code>Apilane API</code>.</li> <li>Apilane API - A service that exposes http API endpoints that can be used from web and/or mobile applications for storing users and entity data records.</li> <li>Apilane Installation - A deployment of one <code>Apilane Portal</code> and (at least) one <code>Apilane API</code> services, where all share the same <code>InstallationKey</code>.</li> <li>Storage provider - The database system of choice where application data are persisted e.g. SqlServer, MySql or Sqlite.</li> <li>Server - Represents a reference to an <code>Apilane API</code> deployment. Each <code>Apilane Installation</code> supports multiple <code>Servers</code> meaning multiple <code>Apilane API</code> deployments <sup>1</sup>.</li> </ul>"},{"location":"concepts/#applications","title":"Applications","text":"<ul> <li>Application - The backend of a client application. Each <code>Apilane Installation</code> supports creating and managing unlimited Applications. Each Application has users, entites and relevant data that are persisted to one of the supported <code>storage providers</code>.</li> <li>Entity - An application entity that represents a conceptual entity of the client application built by the developer. An entity is backed up by a database table.</li> <li>System Entity - A predefined application entity used to support Apilane specific features. For example, the system entity <code>Users</code> holds information regarding <code>Application Users</code>.</li> <li>Property - An entity property that represents a specific piece of information that makes sense the the underlying client application. A property is backed up by a database table column.</li> <li>System Property - A predefined application entity property used to support Apilane specific features. For example, every <code>Entity</code> contains the property <code>Created</code> that holds the date that a record was persisted to the storage provider.</li> </ul>"},{"location":"concepts/#users","title":"Users","text":"<ul> <li>Apilane User - A user that has access to the <code>Apilane Portal</code> and owns applications. A user can create, manage and delete owned applications. A user can share and/or unshare owned applications with other users which in turn acquire rights to the application.</li> <li>Apilane Admin - An <code>Apilane User</code> with admin rights that has access to all instance applications, servers and instance settings.</li> <li>Application User - A user that has registered to an Apilane <code>Application</code> through the developer web/mobile client application.</li> </ul> <ol> <li> <p>For example, an <code>Apilane Installation</code> might consist of 1 <code>Apilane Portal</code> and 2 <code>Apilane API (servers)</code>. One <code>Server</code> migh be internal for testing applications with limited resources and the other <code>Server</code> acting as production server with increased resources. All <code>Servers</code> should be accesible from <code>Apilane Portal</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"deployment/","title":"Deployment","text":"<p>An <code>Apilane Instance</code> consists of 2 images thus it can be deployed in any environment.</p> <p>Environment variables</p> <p>Please visit environment variables section for a description of the available environment variables.</p>"},{"location":"deployment/#docker","title":"Docker","text":"<p>Execute the provided docker-compose.yaml using the command <code>docker-compose -p apilane up -d</code> which will setup the Portal and the Api services on docker. You may then access the portal on http://localhost:5000.</p>"},{"location":"deployment/#k8s","title":"k8s","text":"<p>Apilane can be deployed to k8s, on premise or in any cloud provider. There are many deployment configurations required so it is impossible to provide a commonly acceptable yaml sample.</p> <p>Important</p> <p>Note that for k8s deployments, all instances of the <code>Apilane Portal</code> and <code>Apilane API</code> services must be able to access the application files. Since on-disk files in a container are ephemeral a persistent volume is required. You will have to map the following paths from environment variables</p> <ul> <li>For Portal map <code>FilesPath</code></li> <li>For API map <code>FilesPath</code></li> </ul> <p>Both can point to the same path since the files are not conflicting.</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>An <code>Apilane Instance</code> consists of 2 images thus it can be deployed in any environment. Since docker is widely known and commonly used, we provide a ready to execute docker compose file.</p>"},{"location":"getting_started/#docker-compose","title":"Docker compose","text":"<p>Execute the provided docker-compose.yaml using the command <code>docker-compose -p apilane up -d</code> which will setup the Portal and the Api services on docker. You may then access the portal on http://localhost:5000.</p>"},{"location":"getting_started/#portal-access","title":"Portal access","text":"<p>Use the following default credentials to login to the portal:</p> <ul> <li>Email: admin@admin.com</li> <li>Password: admin</li> </ul> <p>Important</p> <p>You may alter the admin email only by overriding the relevant environment variable as described below. You may change the password after the first login to the portal.</p>"},{"location":"getting_started/#environment-variables","title":"Environment variables","text":"<p>Regardless the deployment of choice (docker, k8s or cloud) you can override the default environment variables according to your setup of preference.</p>"},{"location":"getting_started/#portal","title":"Portal","text":"<ul> <li>Url - Default value <code>http://0.0.0.0:5000</code><ul> <li>The url where the Portal is served.</li> </ul> </li> <li>ApiUrl - Default value <code>http://127.0.0.1:5001</code><ul> <li>The url to the initial API service. Change it according to your deployment setup.</li> </ul> </li> <li>FilesPath - Default value <code>/etc/apilanewebportal</code> <ul> <li>The path to the Portal's files. This is where the portal storage provider lives. The portal storage provider of preference is Sqlite. The only configurable option is the path that the Sqlite database will be created. Leave the default value if there is no specific deployment requirement.</li> </ul> </li> <li>InstallationKey - Default value <code>8dc64403-0f5b-4723-9aa7-42004841d838</code><ul> <li>Can be any guid key, but should be the same with apilanewebapi. Portal and API communicate with each other and authorize access using this installation key. For that reason you are advised to keep it secret.</li> </ul> </li> <li>AdminEmail - Default value <code>admin@admin.com</code><ul> <li>The email for instance portal administrator. The admin user is created only once during the first instance deployment. You are advised to change it with your email before the deployment. Default password is <code>admin</code> which can be changed later from the portal.</li> </ul> </li> </ul>"},{"location":"getting_started/#api","title":"API","text":"<ul> <li>Url - Default value <code>http://0.0.0.0:5001</code><ul> <li>The url where the API is served.</li> </ul> </li> <li>PortalUrl - Default value <code>http://127.0.0.1:5000</code><ul> <li>The url to the Portal. Change it according to your deployment setup.</li> </ul> </li> <li>FilesPath - Default value <code>/etc/apilanewebapi/Files</code><ul> <li>The path to the API server files. All files generated from the server can be found under this path. The only configurable option is the path that those files will be created. Leave the default value if there is no specific deployment requirement.</li> </ul> </li> <li>InstallationKey - Default value <code>8dc64403-0f5b-4723-9aa7-42004841d838</code><ul> <li>Can be any guid key, but should be the same with apilanewebportal. Portal and API communicate with each other and authorize access using this installation key. For that reason you are advised to keep it secret.</li> </ul> </li> </ul>"},{"location":"security_considerations/","title":"Security considerations","text":"<p>An Apilane Instance consists of 2 deployments, the <code>Apilane Portal</code> and the <code>Apilane API</code>. Apilane Portal is a developer management tool and there is no need for client applications to have access to the Portal. Apilane API is the application server and should be accessible from the client application.</p> <p>Malicious traffic</p> <p>Apilane does not offer facilities for identifying malicious traffic towards the server such as DDoS attacks. This is a developer concern and should be taken into account for applications open to the internet.    </p> <p>What Apilane offers is rate limiting management per entity and action. Visit rate limiting for more info.</p>"},{"location":"security_considerations/#apilane-portal","title":"Apilane Portal","text":"<p>Access to the Portal should ideally be restricted to a private network. If that is not possible, you should disable new user registration from the instance settings (image below) to prevent unwanted users from registering to your Apilane Instance. </p> <p></p> <p>Note</p> <p>You may temporarily enable user registration, to allow a valid user registration and disable again right after.</p>"},{"location":"security_considerations/#apilane-api-server","title":"Apilane API (Server)","text":""},{"location":"security_considerations/#ip-allowblock","title":"IP allow/block","text":"<p>Any client application, web or mobile, should have access to the Apilane API, thus most of the times, the Apilane API server is publicly accessible. Depending on the nature of the client application, you can restrict access to the server by IP address on Application level. For more information visit application IP allow/block.</p> <p></p>"},{"location":"security_considerations/#rate-limiting","title":"Rate limiting","text":"<p>Navigate to rate limiting section for more information on how rate limiting may increase application security.</p>"},{"location":"security_considerations/#sample-setups","title":"Sample setups","text":""},{"location":"security_considerations/#sample-setup-1","title":"Sample setup 1","text":""},{"location":"security_considerations/#sample-setup-2","title":"Sample setup 2","text":""},{"location":"security_considerations/#sample-setup-3","title":"Sample setup 3","text":""},{"location":"developer_guide/application/","title":"Application","text":"<p>An application is the backend of your client application. To create a new Application you need to define:</p> <ul> <li>Name - The display name of the Application.</li> <li>Server - The Server where the Application is going to be created/deployed.</li> <li>Storage provider - See Storage providers.</li> <li>Differentiation entity (optional) - See Differentiation entity.</li> </ul> <p></p>"},{"location":"developer_guide/application/#differentiation-entity","title":"Differentiation entity","text":"<p>A differentiation entity allows you to conceptually \"split\" data on the application entities, depending on a system property on the system entity <code>Users</code>.</p> <p>Note</p> <p>The main use of the differentiation entity is to enable access to a record, only for users that share the same value on that property.</p> <p>Warning</p> <p>The differentiation entity can be defined only when creating the application and cannot be edited or deleted later.</p> <p>For example, if you are building an application that is shared between multiple companies, you can set a differentiation entity named <code>Company</code>. Then, each user will have access only on records of the company they are assigned to.</p> <p>It is a client application concern to decide how to assign values to that differentiation entity property for each user. For example, the application developer can use a Custom endpoint to assign the proper differentiation property value to a new user, depending on application needs.</p>"},{"location":"developer_guide/application/#example","title":"Example","text":"<p>A new Application is created with Differantiation entity <code>Company</code>. Apart from the typical system entities, a new entity is created named <code>Company</code>. Additionaly on system entity <code>Users</code> there is an extra system property named <code>Company_ID</code>.</p> <p>Every new user that is registered to the application, will by default be assigned the value <code>null</code> on the differentiation property <code>Company_ID</code>.</p> <p>On every subsequent entity that is created, there is the option to add a differentiation property or not. That is because some entites may hold data that should be common for all companies. On entities that this option is enabled, an extra system property named <code>Company_ID</code> will appear.</p> <p>Assuming we have 2 users, User_A with <code>Company_ID=null</code> and User_B with <code>Company_ID=1</code>. If User_A creates a record on a differentiated entity, the record column <code>Company_ID</code> will have value <code>null</code>. If User_B creates a record on a differentiated entity, the record column <code>Company_ID</code> will have value <code>1</code>. Subsequently all users with value null will have access only to records with that value and users with value 1 will have access only to records with that value.</p>"},{"location":"developer_guide/custom_endpoints/","title":"Custom endpoints","text":"<p>Custom endpoints offer an easy and direct way to expose complex functionality for your application. The logic is simple.</p> <ul> <li>You provide a name for the custom endpoint e.g. <code>MyCustomEndpoint</code>.</li> <li>You write the query to be executed against the storage provider (most probably an SQL query) e.g. <code>select [Email] from [Users] where [ID] = {ID}</code>.</li> <li>Your query may accept inputs as query parameters, which are automatically binded, if you wrap your parameter withs brackets, e.g. the <code>{ID}</code> on the above example.</li> <li>You provide access to the custom endpoint through security management .</li> <li>You can now call this endpoint, providing any required parameters e.g. <code>GET https://my.api.com/api/Custom/MyCustomEndpoint?ID={ID}</code>.</li> </ul> <p>Note</p> <p>Parameters can only be of type big integer (long) to avoid sql injection vulnerabilities.</p> <p>Note</p> <p>All custom endpoints are plain http GET requests.</p> <p></p>"},{"location":"developer_guide/email_templates/","title":"Email templates","text":"<p>Each application can be customized to send an email to users upon registration or to facilitate the \"forget password\" mechanism.</p> <p>Visit the Email section of the application and update the SMTP settings.</p> <p></p> <p>Enable/disable and edit the body and topic of the available email templates.</p> <ul> <li>Email confirmation<ul> <li>If that template is enabled, an email is sent to the user after registration. The email is usually a welcome message and usually contains a url to confirm the user email. The actual url is generated from Apilane and there is a predefined placeholder string to be set wherever you like inside the email body.</li> </ul> </li> <li>Reset password<ul> <li>If that template is enabled, an email is sent to the user upon request to reset password. The email should contain the url to that the user should follow to reset the password. The actual url is generated from Apilane and there is a predefined placeholder string to be set wherever you like inside the email body.</li> </ul> </li> </ul> <p></p> <p>After a user confirms the email by following the url provided on the email, the browser should eventually land somewhere. There is a default landing page for each application. This landing page can be configured to a url of your choice.</p> <p></p>"},{"location":"developer_guide/reports/","title":"Reports","text":"<p>Reports in a quick and easy way to get insights on your application data. You can visualize data from your entities in grids, pie charts or line charts. You can select which properties to visualize, group data by their properties and also apply filters.</p> <p></p> <p>Grid</p> <p></p> <p>Pie chart</p> <p></p> <p>Line chart</p> <p></p>"},{"location":"developer_guide/sdk/","title":"SDK .NET","text":"<p>Apilane offers a Software Development Kit (SDK) for .NET that is designed to simplify the integration of Apilane platform into your .NET applications. With this SDK, you can easily interact with your applications through our robust API, allowing you to focus on building features rather than handling complex API calls.</p> <p></p> <p>Key Benefits of Using the SDK</p> <ul> <li>Ease of Use: The SDK provides a straightforward interface for accessing all API functionalities, making it easy for developers of all skill levels to get started.</li> <li>Streamlined Integration: Quickly integrate our platform into your .NET applications with minimal setup and configuration required.</li> <li>Intuitive Use of the SDK: Designed with user experience in mind, the SDK allows for intuitive interactions, helping you implement features quickly and efficiently.</li> <li>Builder Pattern for API Calls: The SDK utilizes the builder pattern to construct API calls, making it flexible and easy to customize requests while maintaining readability and maintainability.</li> </ul>"},{"location":"developer_guide/sdk/#get-started","title":"Get started","text":"<ul> <li>Add the latest Apilane.Net nuget to your application.</li> <li>Use DI to register the required Apilane services.</li> </ul> <pre><code>string serverUrl = \"https://my.api.server\";\nstring applicationToken = \"23d4444f-b56e-4c5a-98ed-ef251796a238\";\nbuilder.Services.UseApilane(serverUrl, applicationToken);\n</code></pre> <ul> <li>Inject <code>IApilaneService</code> to your code and start interacting with your Apilane server instance.</li> </ul> <pre><code>private readonly IApilaneService _apilaneService;\n\npublic AccountController(IApilaneService apilaneService)\n{\n    _apilaneService = apilaneService;\n}\n</code></pre>"},{"location":"developer_guide/sdk/#account","title":"Account","text":""},{"location":"developer_guide/sdk/#login","title":"Login","text":"<pre><code>public async Task&lt;IActionResult&gt; Login(string email, string password)\n{\n    // Login\n\n    var loginResponse = await _apilaneService.AccountLoginAsync&lt;AppUserExt&gt;(new LoginItem\n    {\n        Email = email,\n        Password = password\n    });\n\n    // Check for errors\n\n    if (loginResponse.HasError(out var error))\n    {\n        throw new Exception(\"Something went wrong\");\n    }\n\n    // Get and return the user authorization token\n\n    var authorizationToken = loginResponse.Value.AuthToken;\n\n    return Json(authorizationToken);\n}\n</code></pre>"},{"location":"developer_guide/sdk/#data","title":"Data","text":"<p>Assuming the following entity</p> <pre><code>public class MyEntity : Apilane.Net.Models.Data.DataItem\n{\n    public string? Property_A { get; set; }\n    public string? Property_B { get; set; }\n    public string? Property_C { get; set; }\n}\n</code></pre>"},{"location":"developer_guide/sdk/#get","title":"Get","text":"<pre><code>public async Task&lt;IActionResult&gt; GetData()\n{\n    string authToken = \"...\";\n\n    // Get Data\n\n    var getDataResponse = await _apilaneService.GetDataAsync&lt;MyEntity&gt;(DataGetListRequest.New(\"MyEntity\")\n        .WithAuthToken(authToken));\n\n    // Check for errors\n\n    if (getDataResponse.HasError(out var error))\n    {\n        throw new Exception(\"Something went wrong\");\n    }\n\n    // Return data\n\n    List&lt;MyEntity&gt; listOfData = getDataResponse.Value.Data;\n\n    return Json(listOfData);\n}\n</code></pre>"},{"location":"developer_guide/sdk/#post","title":"Post","text":"<pre><code>public async Task&lt;IActionResult&gt; PostData()\n{\n    string authToken = \"...\";\n\n    // Post Data\n\n    var postDataResponse = await _apilaneService.PostDataAsync(DataPostRequest.New(\"MyEntity\")\n        .WithAuthToken(authToken),\n        new MyEntity()\n        {\n            Property_A = \"a\",\n            Property_B = \"b\",\n            Property_C = \"c\",\n        });\n\n    // Check for errors\n\n    if (postDataResponse.HasError(out var error))\n    {\n        throw new Exception(\"Something went wrong\");\n    }\n\n    // Return new created id\n\n    long newId = postDataResponse.Value.Single();\n\n    return Json(newId);\n}\n</code></pre>"},{"location":"developer_guide/sdk/#put","title":"Put","text":"<pre><code>public async Task&lt;IActionResult&gt; PutData()\n{\n    string authToken = \"...\";\n\n    // Put Data\n\n    var putDataResponse = await _apilaneService.PutDataAsync(DataPutRequest.New(\"MyEntity\")\n        .WithAuthToken(authToken),\n        new\n        {\n            ID = 1,\n            Property_A = \"a\"\n        });\n\n    // Check for errors\n\n    if (putDataResponse.HasError(out var error))\n    {\n        throw new Exception(\"Something went wrong\");\n    }\n\n    // Return the count of affected records\n\n    int affectedRecords = putDataResponse.Value;\n\n    return Json(affectedRecords);\n}\n</code></pre>"},{"location":"developer_guide/sdk/#delete","title":"Delete","text":"<pre><code>public async Task&lt;IActionResult&gt; DeleteData()\n{\n    string authToken = \"...\";\n    long idToDelete = 1;\n\n    // Delete Data\n\n    var deleteDataResponse = await _apilaneService.DeleteDataAsync(DataDeleteRequest.New(\"MyEntity\")\n        .WithAuthToken(authToken)\n        .AddIdToDelete(idToDelete));\n\n    // Check for errors\n\n    if (deleteDataResponse.HasError(out var error))\n    {\n        throw new Exception(\"Something went wrong\");\n    }\n\n    // Return the deleted ids\n\n    long[] deletedIds = deleteDataResponse.Value;\n\n    return Json(deletedIds);\n}\n</code></pre>"},{"location":"developer_guide/sdk/#urls","title":"Urls","text":"<p>SDK offers also urls for Apilane related pages or endpoints.</p>"},{"location":"developer_guide/sdk/#forgot-password-page","title":"Forgot password page","text":"<pre><code>string url = _apilaneService.UrlFor_Account_Manage_ForgotPassword();\n</code></pre>"},{"location":"developer_guide/sdk/#forgot-password-email-api-endpoint","title":"Forgot password email API endpoint","text":"<pre><code>string url = _apilaneService.UrlFor_Email_ForgotPassword(\"email@email.com\");\n</code></pre>"},{"location":"developer_guide/sdk/#request-confirmation-email-api-endpoint","title":"Request confirmation email API endpoint","text":"<pre><code>string url = _apilaneService.UrlFor_Email_RequestConfirmation(\"email@email.com\");\n</code></pre>"},{"location":"developer_guide/security/","title":"Security","text":"<p>Apilane provides all the tools required for granular access control to the application on entity and property level.</p>"},{"location":"developer_guide/security/#sign-in","title":"Sign in","text":""},{"location":"developer_guide/security/#force-only-one-login-at-a-time","title":"Force only one login at a time","text":"<p>If this option is enabled, each new user login forces logout from any previous logged in sessions. This setting essentialy deletes/deprecates any previous authentication tokens which will prevent further access using these tokens.</p>"},{"location":"developer_guide/security/#allow-users-with-unconfirmed-email-to-login","title":"Allow users with unconfirmed email to login","text":"<p>If this option is enabled, all users can login regardless if the email is confirmed or not. Disabling this requires that uses have confirmed their email before being able to login and retrieve an authentication token.</p> <p></p>"},{"location":"developer_guide/security/#register","title":"Register","text":""},{"location":"developer_guide/security/#allow-new-users-to-register","title":"Allow new users to register","text":"<p>Allow or prevent new users from registering. This option may be useful for internal applications that you would like to protect from unintended registrations.</p> <p></p>"},{"location":"developer_guide/security/#ip-allowblock","title":"IP allow/block","text":""},{"location":"developer_guide/security/#block-only-the-following-ip-addresses","title":"Block only the following IP addresses","text":"<p>Use this setting to block specific IP addresses from accessing your application. This configuration may be usefull if you wish to isolate applications, e.g. prevent access to a production application from a development/staging server.</p>"},{"location":"developer_guide/security/#allow-only-the-following-ip-addresses","title":"Allow only the following IP addresses","text":"<p>Use this setting to allow only specific IP addresses access your application. This configuration may be usefull if you wish to isolate applications, e.g. allow access to a production application only from a production server.</p> <p>Warning</p> <p>These settings are not a replacement for network security tools. You can use these settings as an additional security measure but not as the main application security tool.</p> <p></p>"},{"location":"developer_guide/security/#entitiesproperties","title":"Entities/Properties","text":"<p>Apilane provides tools to enable granular access control to the application on entity and property level.</p> <p>Note</p> <p>Apilane implements a robust role-based access control (RBAC) system that allows for granular access to endpoints based on user roles. This system is designed to accommodate overlapping roles to ensure flexibility and precision in permission management.</p> <p>For instance, a user assigned the 'admin' role inherits all the permissions of an 'authorized user,' granting them broader access to various functionalities. However, the 'authorized user' role is governed by its own distinct access rules, tailored to specific operational requirements.</p> <p>This means that while both roles can access certain endpoints, the 'admin' user may have additional capabilities such as modifying data, whereas the 'authorized user' may be limited to read-only access.</p> On this sample setup, all authenticated users are allowed to read all properties of entity `Entity_A` but only users in role `admin` are allowed to create new records."},{"location":"developer_guide/security/#custom-endpoints","title":"Custom endpoints","text":"<p>Apilane provides tools to enable granular access control to the application custom endpoints.</p> On this sample setup, all authenticated users are allowed to call the endpoint `MyCustomEndpoint`."},{"location":"developer_guide/security/#rate-limiting","title":"Rate limiting","text":"<p>If an application is accessible on the internet, you must also be prepared to deal with malicious users. For instance, if you permit unauthorized users to create records for an entity, it becomes easy for anyone to automate the process with a bot, potentially overwhelming your entity with millions of records.</p> <p>One way to minimize the impact of a malicious attack, is rate limiting. Rate limiting is a crucial security measure that helps protect your application by controlling the number of requests a user can make in a given timeframe, thus preventing abuse, ensuring fair usage, and maintaining optimal performance; however, it's essential to tailor rate limiting strategies to the specific domain and context of your application to balance security with user experience.</p> <p>Note</p> <p>Apilane features an advanced rate limiting management system designed to ensure fair usage and protect against abuse. When multiple rate limiting rules are applicable to a particular user or endpoint, the system evaluates all relevant rules and ultimately applies the most permissive rule, allowing for the highest allowable request rate.</p> <p>This approach facilitates flexible rule definitions tailored to different user roles, scenarios, or endpoints while ensuring that users can benefit from the most lenient usage conditions permitted by the applicable rules. For instance, if a user qualifies for several rate limiting rules, one allowing a higher request rate and another enforcing a stricter limit, the application will enforce the higher rate to ensure optimal access.</p> On this sample setup, all authenticated users are allowed to call the endpoint `MyCustomEndpoint` at most 100 times per minute while users in role `admin` are allowed to call the endpoint unlimited times per second. <p>Info</p> <p>Apilane employs Sliding Window Rate Limiting to manage and control the rate of requests from users effectively. This method allows for a more granular approach to tracking request counts over time compared to traditional fixed window strategies</p>"},{"location":"developer_guide/server_overview/","title":"Server","text":"<p>A <code>Server</code> is an Apilane concept that groups an <code>Apilane API</code> deployment.</p>"},{"location":"developer_guide/server_overview/#create","title":"Create","text":"<p>A <code>Server</code> has a Url where the Portal and any client application can access the API.</p> <p></p>"},{"location":"developer_guide/server_overview/#sample-setup","title":"Sample setup","text":"<p>An <code>Apilane Instance</code> might consist of more than 1 servers. Let's assume the following setup on k8s as an example. This hypothetical instance consists of 2 <code>Servers</code> 1 used for testing and another 1 for production.</p> <p></p>"},{"location":"developer_guide/storage_providers/","title":"Storage providers","text":"<p>Apilane provides out-of-the-box support for Sqlite, SqlServer and MySql. That means that each application data can be stored in any of the supported storage providers.</p> <p>Note</p> <p>On storage provider level, Apilane handles creating, renaming or deleting entities (tables) and properties (columns). It also handles unique and foreign key constaints. It does not provide any tools further than that like index management.</p>"},{"location":"developer_guide/storage_providers/#sqlite","title":"Sqlite","text":"<p>For Sqlite there is no further configuration required. A new Sqlite database file will be generated to store your application data.</p> <p>Note</p> <p>Sqlite can support requirements for most applications. It is perfect for developing a quick PoC, a test application but is can also support production applications if the requirements are not very high. You can start with Sqlite and migrate to another storage provider at a later stage.</p>"},{"location":"developer_guide/storage_providers/#sqlserver","title":"SqlServer","text":"<p>For SqlServer you will need to provide a connection string to an existing empty database. Apilane API service should be able to access the SqlServer instance. It will attempt to connect and create the system entites/properties. Database management regarding resources and availability is a developer concern.</p>"},{"location":"developer_guide/storage_providers/#mysql","title":"MySql","text":"<p>For MySql you will need to provide a connection string to an existing empty database. Apilane API service should be able to access the MySql instance. It will attempt to connect and create the system entites/properties. Database management regarding resources and availability is a developer concern.</p>"}]}