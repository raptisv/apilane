@using Apilane.Web.Portal.Models;
@using Apilane.Common;
@using Apilane.Common.Extensions;
@using Apilane.Common.Models;
@using Apilane.Common.Helpers;
@model DBWS_Application

@{
    ViewBag.Title = "Email";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var isDarkTheme = Html.IsDarkTheme(Context.Request);
}

<div class="clearfix">
    <div class="row">
        <div class="col-lg-12">
            <div class="page-header">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">@Model.Server.Name</li>
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Applications")">Applications</a></li>
                        <li class="breadcrumb-item"><a href="@Url.RouteUrl("AppRoute", new { controller = "Application", action = "Entities", appid = Model.Token })">@Model.Name</a></li>
                        <li class="breadcrumb-item active">Email</li>
                    </ol>
                </nav>
            </div>

            @{
                await Html.RenderPartialAsync("~/Views/Application/OptionsPartial.cshtml", Model);
            }

            @using (Html.BeginRouteForm("AppRoute", new { controller = "Application", action = "Email", appid = Model.Token }, FormMethod.Post, true, new { role = "form" }))
            {
                <div class="row clearfix">

                    <div class="col-12 col-lg-4">
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 mb-6">
                                <div class="card @(Model.GetEmailSettings() is null ? "border-red" : "")">
                                    <h4 class="card-header">
                                        SMTP settings
                                    </h4>
                                    <div class="card-body">
                                        <div>
                                            <div class="form-group mb-3">
                                                <div class="form-line">
                                                    @Html.TextBoxFor(m => m.MailServer, new { @class = "form-control", placeholder = "Mail server" })
                                                </div>
                                                @Html.ValidationMessageFor(m => m.MailServer, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group mb-3">
                                                <div class="form-line">
                                                    @Html.TextBoxFor(m => m.MailServerPort, new { @class = "form-control", type = "number", placeholder = "Mail server port" })
                                                </div>
                                                @Html.ValidationMessageFor(m => m.MailServerPort, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group mb-3">
                                                <div class="form-line">
                                                    @Html.TextBoxFor(m => m.MailFromAddress, new { @class = "form-control", placeholder = "Sender email address" })
                                                </div>
                                                @Html.ValidationMessageFor(m => m.MailFromAddress, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group mb-3">
                                                <div class="form-line">
                                                    @Html.TextBoxFor(m => m.MailFromDisplayName, new { @class = "form-control", placeholder = "Sender display name" })
                                                </div>
                                                @Html.ValidationMessageFor(m => m.MailFromDisplayName, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group mb-3">
                                                <div class="form-line">
                                                    @Html.TextBoxFor(m => m.MailUserName, new { @class = "form-control", placeholder = "Mail server username" })
                                                </div>
                                                @Html.ValidationMessageFor(m => m.MailUserName, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group mb-3">
                                                <div class="form-line">
                                                    @Html.TextBoxFor(m => m.MailPassword, new { @class = "form-control", placeholder = "Mail server password", type = "password", autocomplete = "new-password" })
                                                </div>
                                                @Html.ValidationMessageFor(m => m.MailPassword, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary ignore-default-submit" title="Save">
                                            <i class="bi bi-floppy"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-12 col-lg-8">
                        <div class="row clearfix">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 mb-6">
                                <div class="card">
                                    <h4 class="card-header">Email templates</h4>
                                    <div class="card-body">
                                        <div class="table-responsive bg-transparent">
                                            <table id="table-email-system" class="table table-hover table-borderless table-sm bg-transparent">
                                                <thead class="bg-transparent">
                                                    <tr class="bg-transparent">
                                                        <th class="bg-transparent">Enabled</th>
                                                        <th class="bg-transparent">Description</th>
                                                        <th class="bg-transparent"></th>
                                                    </tr>
                                                </thead>
                                                <tbody></tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            Email confirmation landing page
                                        </h5>
                                        <h6 class="card-subtitle text-muted mb-3">
                                            After user confirms his email address, redirect to this url
                                        </h6>
                                        <div>
                                            <div class="form-group mb-3">
                                                <div class="form-line mb-3">
                                                    @Html.TextBoxFor(m => m.EmailConfirmationRedirectUrl, new { @class = "form-control", placeholder = "Type the url here" })
                                                </div>
                                                <div class="alert alert-info" role="alert">
                                                    This setting applies only if the "Email confirmation" email is enabled.
                                                    <br />
                                                    If you leave this field empty, the user will be redirected to this <a target="_blank" href="@Url.Action("AppEmailConfirmed", "Account")">default landing page</a>
                                                </div>
                                                @Html.ValidationMessageFor(m => m.EmailConfirmationRedirectUrl, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary ignore-default-submit" title="Save">
                                            <i class="bi bi-floppy"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
               
                </div>
            }
            </div>
        </div>
    </div>

    <div class="modal fade" id="modal-edit-email" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Edit email</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input id="template-ID" type="hidden" value="">
                    <input id="template-EventCode" type="hidden" value="">
                    <div class="form-group mb-3">
                        <div class="form-line">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="template-Active">
                                <label class="form-check-label" for="template-Active">Enabled</label>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="template-Subject" class="form-label">Email subject</label>
                        <input class="form-control" id="template-Subject" placeholder="Email subject" type="text" value="">
                    </div>
                    <div class="mb-3">
                        <label for="template-Content" class="form-label">Email body (html)</label>
                        <textarea id="template-Content" style="width:100%;height:200px;" placeholder="Email body" class="form-control"></textarea>
                    </div>
                    <hr />
                    <div class="form-group mb-3">
                        <div>
                            <div id="template-Placeholders"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-subtle" data-bs-dismiss="modal">Cancel</button>
                    <button id="btn-save" type="button" class="btn btn-primary"><i class="bi bi-floppy me-2"></i>Save</button>
                </div>
            </div>
        </div>
    </div>


                @section scripts {
    <script type="text/javascript">

        $.ajaxSetup({
            beforeSend: function (xhr) {
                xhr.setRequestHeader('Authorization', 'Bearer @Html.GetPortalUserAuthToken(User.Identity!)');
                xhr.setRequestHeader('@Globals.ClientIdHeaderName', '@Globals.ClientIdHeaderValuePortal');
                xhr.setRequestHeader('@Globals.ApplicationTokenHeaderName', '@Model.Token');
            }
        });

        var EmailPlaceholders = @Html.Raw(Json.Serialize(EmailEvent.GetEventsPlaceholdersAndDescriptions()));

        function handleCustomError(e) {
            if (e.status != null && e.status == @((int)System.Net.HttpStatusCode.Unauthorized)) {
                location.href = '@Url.Action("Login", "Account", new { returnUrl = Context.Request.Path })';
            } else {
                var jsonerror = getErrorJSON(e);
                if (jsonerror != null) {
                    if (jsonerror.Property != null) {
                        $('#template-' + jsonerror.Property).addClass('border-red');
                    }

                    if (jsonerror.Code == 'REQUIRED') {
                        // Do nothing
                    } else if (jsonerror.Code == 'VALIDATION') {
                        alert('Allowed characters a-z, A-Z and 0-9');
                    } else {
                        alert(jsonerror.Message);
                    }
                } else {
                    if (e.xhr && e.xhr.responseText) {
                        alert(e.xhr.responseText);
                    }
                    else if (e.responseText) {
                        alert(e.responseText);
                    }
                }
            }
        }

        $(document).ready(function () {
            reloadData();
        });

        function reloadData() {
            getEmail(null, function (data) {
                loadTableEmailsSystem(data);
            });
        }

        function loadTableEmailsSystem(data) {
            var html = '';
            $.each(data, function (index, value) {
                if (value.EventCode !== null) {
                    html += '<tr>';
                    html += '<td class="bg-transparent"><span class="label label-' + (value.Active ? 'success' : 'danger') + '">' + (value.Active ? '<i class="bi bi-check fs-1 text-success"></i>' : '<i class="bi bi-x fs-1 text-danger"></i>') + '</span></td>';
                    html += '<td class="bg-transparent ' + value.EventCode + '">' + value.Description + '</td>';
                    html += '<td class="bg-transparent option"><a class="btn-edit btn btn-secondary" data-id="' + value.ID + '" href="#"><i class="bi bi-pencil"></i></a></td>';
                    html += '</tr>';
                    //html += '<tr><td colspan="3" style="padding:0;"><div class="email-edit" id="email-edit-' + value.ID + '"></div></td></tr>';
                }
            });

            $('#table-email-system tbody').html(html);

            $('#table-email-system .btn-edit').click(function (e) {
                e.preventDefault();
                var id = $(this).data().id;
                getEmail(id, function (template) {
                    openEdit(template[0]);
                });
            });
        }

        function extractContent(s) {
            var span = document.createElement('span');
            span.innerHTML = s;
            return span.textContent || span.innerText;
        };

        function openEdit(template) {
            // $('.email-edit').empty();
            // $('#email-edit-' + template.ID).html($('#template-email-edit').html());

            $('#btn-save').off('click');
            $('#btn-save').on('click', function (e) {
                e.preventDefault();
                $('.border-red').removeClass('border-red');

                var data = {
                    ID: parseInt($('#template-ID').val()),
                    EventCode: $('#template-EventCode').val(),
                    Active: $('#template-Active').prop('checked'),
                    Subject: $('#template-Subject').val(),
                    Content: $('#template-Content').val()
                };

                $.ajax({
                    url: '@Model.Server.ServerUrl/api/Email/Update',
                    type: 'PUT',
                    data: JSON.stringify(data),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        $('#modal-edit-email').modal('hide');
                        reloadData();
                    },
                    error: function (e) {
                        handleCustomError(e);
                    }
                });
            });

            $('#template-ID').val(template.ID);
            $('#template-EventCode').val(template.EventCode);
            $('#template-Subject').val(template.Subject);
            $('#template-Content').val(template.Content);
            $('#template-Active').prop('checked', template.Active);

            var htmlPlaceholders = '<div><strong>Use the following placeholders to be replaced with</strong></div>';

            $.each(EmailPlaceholders, function (i, value) {
                if (value.Event == template.EventCode) {
                    htmlPlaceholders += value.Name + (value.Description != null && value.Description != '' ? `<span class="text-muted ms-2">${value.Description}</span>` : '') + '<br/>';
                }
            });

            $('#template-Placeholders').html(htmlPlaceholders);

            $('#modal-edit-email').modal('show');
        }

        function getEmail(id, callback) {
            $.ajax({
                url: '@Model.Server.ServerUrl/api/Email/GetEmails' + (id != null ? '?ID=' + id : ''),
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if (callback)
                        callback(data);
                },
                error: function (e) {
                    handleCustomError(e);
                }
            });
        }

    </script>
                }