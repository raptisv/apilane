@using Apilane.Web.Portal.Models;
@using Apilane.Common.Models;
@using Apilane.Common.Enums;
@using Apilane.Common.Utilities;
@model DBWS_ReportItem

@{
    var IsEdit = Model != null && Model.ID > 0;

    ViewBag.Title = IsEdit ? "Edit" : "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

    DBWS_Application Application = (DBWS_Application)ViewBag.Application;

    List<SelectListItem> ReportTypes = EnumProvider<ReportType>.GetValues(ReportType.Pie).Select(x => new SelectListItem { Text = x.Value, Value = x.Key.ToString() }).ToList();

    List<DBWS_Entity> Entities = ((DBWS_Application)ViewBag.Application).Entities;

    List<SelectListItem> AvailableEntities = Entities.Select(x => new SelectListItem() { Value = x.Name, Text = x.Name, Selected = (IsEdit && x.Name.Equals(Model?.Entity)) }).ToList();
}

<div class="clearfix">
    <div class="row">
        <div class="col-lg-12">
            <div class="page-header">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">@Application.Server.Name</li>
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Applications")">Applications</a></li>
                        <li class="breadcrumb-item"><a href="@Url.RouteUrl("AppRoute", new {controller = "Application", action = "Entities", appid = Application.Token })">@Application.Name</a></li>
                        <li class="breadcrumb-item"><a href="@Url.RouteUrl("AppRoute", new {controller = "Reports", action = "Index", appid = Application.Token })">Reports</a></li>
                        <li class="breadcrumb-item active">Report</li>
                    </ol>
                </nav>
            </div>
            <div class="row clearfix">
                <div class="col-12 col-xl-6">
                    <div class="card">
                        <h4 class="card-header">
                            @if (IsEdit)
                            {
                                @: Edit report '@Model?.Title'
                            }
                            else
                            {
                                @: New report
                            }
                        </h4>
                        <div class="card-body">
                            @using (Html.BeginRouteForm("AppRoute", new { controller = "Reports", action = (IsEdit ? "Edit" : "Create"), appid = Html.GetAppToken(), ReturnUrl = ViewBag.ReturnUrl, ID = (Model?.ID ?? 0) }, FormMethod.Post, true, new { role = "form" }))
                            {

                                @Html.HiddenFor(m => m.AppID)
                                @Html.HiddenFor(m => m.Filter)
                                <div class="form-group mb-3">
                                    <div class="form-line">
                                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control", placeholder = "Report title", autofocus = "autofocus" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group mb-3">
                                    <div class="">
                                        @Html.DropDownListFor(m => m.TypeID, ReportTypes, null, new { @class = "form-select" })
                                        @Html.ValidationMessageFor(m => m.TypeID, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group mb-3">
                                    <div class="">
                                        @Html.DropDownListFor(m => m.Entity, AvailableEntities, null, new { @class = "form-select" })
                                        @Html.ValidationMessageFor(m => m.Entity, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group mb-3 form-float">
                                    <div class="form-line">
                                        @Html.TextBoxFor(m => m.Properties, new { @class = "form-control", placeholder = "-- Select properties to draw in grid --", @readonly = true })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Properties, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group mb-3 form-float">
                                    <div class="form-line">
                                        @Html.TextBoxFor(m => m.GroupBy, new { @class = "form-control", placeholder = "-- Select properties to group by --", @readonly = true })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.GroupBy, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group mb-3">
                                    <div class="form-line">
                                        @Html.TextBoxFor(m => m.MaxRecords, new { @class = "form-control", placeholder = "Max records to fetch", type = "number", min = "1", max = "1000" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.MaxRecords, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group mb-3">
                                    <div id="report-filters">
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Filter, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group mb-3">
                                    @Html.ValidationMessage("CustomError", new { @class = "text-danger" })
                                </div>
                            }
                            <button type="submit" class="btn_save btn btn-primary ignore-default-submit" title="@(IsEdit ? "Save" : "Create")">
                                <i class="bi bi-floppy"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/template" id="template-select">
    <small class="report-type-@(ReportType.Pie)" style="display:none;">You can select only one property to display on a pie chart</small>
    <ul id="sortable" class="list-group">
    </ul>
</script>

@section scripts{
    <script type="text/javascript">

        $('button.btn_save').on('click', function () {
            $('button.btn_save').attr('disabled', true);
            $('button.btn_save').html(`<div class="spinner-border spinner-border-sm">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>`);
            var filterObj = getFilterObject();
            $('#Filter').val(filterObj.Filters.length > 0 ? JSON.stringify(getFilterObject()) : '');
            $('form').submit();
        });

        @*loadDescription();

        function loadDescription() {
            var entity = $('#@nameof(DBWS_ReportItem.Entity)').find("option:selected").val();
            var typeID = $('#@nameof(DBWS_ReportItem.TypeID)').find("option:selected").val();
            var groupBy = $('#@nameof(DBWS_ReportItem.GroupBy)').val();
            var properties = $('#@nameof(DBWS_ReportItem.Properties)').val();
            var maxRecords = $('#@nameof(DBWS_ReportItem.MaxRecords)').val();

            var type = 'grid';
            if (typeID == @((int)Globals.ReportType.Pie))
                type = 'pie chart';
            if (typeID == @((int)Globals.ReportType.Line))
                type = 'line chart';

            var result = 'I want to draw a ' + type + ' concerning entity ' + entity;

            if (properties != '')
                result += '.<br/>I want to watch the properties: ' + properties;

            if (groupBy != '')
                result += ' and group the data by: ' + groupBy + '.';

            if (maxRecords != '')
                result += '<br/>I want to get only the top ' + maxRecords + ' records.';

            $('.report-descr').html(result);
        }*@


         $('#report-filters').load('@Url.RouteUrl("AppRoute", new { controller = "Application", action = "UpdateFilterBuilder", EntityName = (Model != null ? Model.Entity : Entities.First().Name)})&ExistingFilter=@(Model != null && Model.Filter != null ? Uri.EscapeDataString(Model.Filter) : "") ');

        $('#@nameof(DBWS_ReportItem.Entity)').on('change', function () {
            var entity = $('#@nameof(DBWS_ReportItem.Entity)').find("option:selected").val();

            $('#report-filters').load('@Url.RouteUrl("AppRoute", new { controller = "Application", action = "UpdateFilterBuilder" })?EntityName=' + entity);
        });

        $('#@nameof(DBWS_ReportItem.Entity), #@nameof(DBWS_ReportItem.TypeID)').on('change', function () {
            $('#@nameof(DBWS_ReportItem.Properties), #@nameof(DBWS_ReportItem.GroupBy)').val('');

            var porpertiesDescr = '-- Select properties to draw in grid --';
            var typeID = $('#@nameof(DBWS_ReportItem.TypeID)').find("option:selected").val();
            if (typeID == @((int)ReportType.Pie))
                porpertiesDescr = '-- Select properties to draw on the pie chart --';
            if (typeID == @((int)ReportType.Line))
                porpertiesDescr = '-- Select properties to draw on the line chart --';

            $('#@nameof(DBWS_ReportItem.Properties)').attr('placeholder', porpertiesDescr);
        });

        $('#@nameof(DBWS_ReportItem.Properties)').on('click', function () {
            loadReportProperties(true);
        });

        $('#@nameof(DBWS_ReportItem.GroupBy)').on('click', function () {
            loadReportProperties(false);
        });

        function loadReportProperties(isProperties) {
            var entity = $('#@nameof(DBWS_ReportItem.Entity)').find("option:selected").val();
            if (entity == '' || entity == null)
                entity = '_';

            var TypeID = $('#@nameof(DBWS_ReportItem.TypeID)').find("option:selected").val();

            var url = '@Url.RouteUrl("EntRoute", new { controller="Entity", action="GetProperties", appid=Application.Token, entid="PLACEHOLDER" })?typeID=' + TypeID;

            $.ajax({
                url: url.replace('PLACEHOLDER', entity),
                type: 'GET',
                success: function (data) {

                    //var selectedValues = $(isProperties ? '#@nameof(DBWS_ReportItem.Properties)' : '#@nameof(DBWS_ReportItem.GroupBy)').val().split(',');

                    var availableValues = (isProperties == true ? data.Properties : data.Groupings);

                    var properties = [];

                    //// Add selected values first
                    //$.each(selectedValues, function (index, value) {
                    //    if (value != null && value.trim() != '' && $.inArray(value, availableValues) >= 0)
                    //        properties.push('<li class="list-group-item"><input type="checkbox" checked id="check-' + value + '" class="check-property" data-id="' + value + '"/><label for="check-' + value + '">' + value + '</label></li>');
                    //});

                    $.each(availableValues, function (index, value) {
                        var prop = value.Name;
                        var html = '';
                        html = '<li class="list-group-item">';
                        html += `<label class='custom-control custom-checkbox'>
                                    <input type="checkbox" id="check-${prop}" class="check-property custom-control-input" data-id="${(value.Subs.length == 0 ? prop : '')}" data-sublist="sub-list-${prop}"/>
                                    <span class='custom-control-label'>${prop}</span>
                                </label>`;
                        if (value.Subs.length > 0) {
                            html += '<ul style="list-style: none;display:none;" class="sub-list-list sub-list-' + prop + '">';
                            $.each(value.Subs, function (j, sub) {
                                html += `<li>
                                            <label class='custom-control custom-checkbox'>
                                              <input type="checkbox" id="check-${prop}-${sub}" class="check-sub custom-control-input" data-id="${prop}.${sub}"/>
                                              <span class='custom-control-label'>${sub}</span>
                                            </label>
                                        </li>`;
                            });
                            html += '</ul>';
                        }
                        html += '</li>';
                        properties.push(html);
                    });

                    if (properties.length == 0) {
                        Swal.fire({
                            title: 'Select properties' + (isProperties ? ' to watch' : ' to group by'),
                            text: 'No properties found. Please select another entity',
                            showCancelButton: false,
                            closeOnConfirm: true,
                            confirmButtonText: 'OK'
                        });
                    } else {
                        Swal.fire({
                            position: 'top',
                            title: 'Select properties' + (isProperties ? ' to watch' : ' to group by'),
                            html: $('#template-select').html(),
                            showCancelButton: true,
                            closeOnConfirm: false,
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#4CAF50'
                        }).then((submit) => {
                            if (submit) {
                                var txt = [];
                                $.each($('.check-property:checked, .check-sub:checked'), function (index, element) {
                                    var item = $(element).data().id;
                                    if (item != null && item.trim() != '')
                                        txt.push(item);
                                });

                                if (txt.length == 0) {
                                    swal.showInputError('Select at least one property');
                                } else {
                                    $(isProperties ? '#@nameof(DBWS_ReportItem.Properties)' : '#@nameof(DBWS_ReportItem.GroupBy)').val(txt.join(','));
                                    swal.close();
                                }
                            }
                        });

                        if (TypeID == @((int)ReportType.Pie) && isProperties == true)
                            $('.report-type-@(ReportType.Pie)').show();

                        $('#sortable').html(properties);
                        $('#sortable').sortable();
                        $('#sortable').disableSelection();

                        $('.check-property').on('change', function () {
                            var that = this;
                            $('.sa-error-container').removeClass('show');
                            $('.' + $(this).data().sublist).toggle('slow');

                            if (this.checked == true) {
                                // Line chart groupings can be of only one type
                                if (TypeID == @((int)ReportType.Line) && isProperties == false) {
                                    var checked = this.checked;
                                    $('.check-property, .check-sub').prop('checked', false);
                                    $(this).prop('checked', checked);
                                    $('.sub-list-list').hide();
                                    $('.' + $(this).data().sublist).show();
                                }
                            } else {
                                // If uncheck parent, uncheck children
                                $(this).parent().find('.check-sub').prop('checked', false);
                            }
                        });

                        $('.check-sub').on('change', function () {
                            $('.sa-error-container').removeClass('show');
                            // Pie chart property can be only one
                            if (TypeID == @((int)ReportType.Pie) && isProperties == true) {
                                var checked = this.checked;
                                $('.check-sub').prop('checked', false);
                                $(this).prop('checked', checked);
                            }
                        });

                    }
                },
                error: function (e) {
                    var jsonResponse = { Message: 'Error' };
                    if (e.responseJSON) {
                        jsonResponse = e.responseJSON;
                    }
                    else if (e.xhr && e.xhr.responseText) {
                        jsonResponse = JSON.parse(e.xhr.responseText);
                    }
                }
            });
        }

    </script>
}

@section styles{
    <style>

        input#Properties,
        input#GroupBy {
            cursor: pointer;
        }

        .list-group {
            height: 350px;
            overflow: auto;
        }

        .list-group-item {
            transition: unset !important;
            text-align: left !important;
            padding: 4px 0 0px 12px;
        }

        #Filter,
        #Properties,
        #GroupBy {
            font-family: Consolas;
        }
    </style>
}